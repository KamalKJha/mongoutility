Best Practices for Designing Timestamp and User Context Columns in PostgreSQL

Purpose
This document outlines best practices for application developers designing PostgreSQL databases to include columns tracking when records are created or updated (created_at, updated_at) and by whom (created_by_user_id, updated_by_user_id). These practices ensure auditability, performance, and maintainability, particularly in OLTP (Online Transaction Processing) applications like payment processing systems. It also covers the use of BEFORE UPDATE and AFTER UPDATE triggers to automate updates effectively.
Audience
Application developers working with PostgreSQL in modern application stacks (e.g., Java, Spring Boot, Node.js), especially those integrating external authentication systems.


General Best Practices
1. Use TIMESTAMP WITH TIME ZONE for Timestamps
Why: Stores timestamps in UTC, ensuring consistency across time zones, which is critical for global applications.

Practice: Use TIMESTAMP WITH TIME ZONE (aka timestamptz) for created_at and updated_at.

Contrast with timestamp without time zone: The latter does not store time zone information, which can lead to errors in multi-timezone environments.



Example:

created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
updated_at TIMESTAMP WITH TIME ZONE


Track User Context with Foreign Keys
Why: Links created_by_user_id and updated_by_user_id to a users table, ensuring referential integrity and auditability.

Practice: Define a users table and use foreign keys. Make created_by_user_id mandatory (NOT NULL) and updated_by_user_id optional (NULL allowed until an update occurs).

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE transactions (
    id SERIAL PRIMARY KEY,
    data TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE,
    created_by_user_id INT NOT NULL REFERENCES users(id),
    updated_by_user_id INT REFERENCES users(id)
);

Balance Application and Database Logic
Why: Modern apps often use external authentication (e.g., OAuth, JWT), making application-layer control of user context more flexible, while database triggers ensure timestamp consistency.

Practice:
Set created_at and created_by_user_id in the application or use a DEFAULT for created_at.

Use triggers for updated_at and optionally updated_by_user_id in high-concurrency OLTP systems.

Consideration: If portability or testability is a priority, keep all logic in the application.



Ensure Auditability
Why: Compliance (e.g., PCI DSS for cardholder data) requires tracking who did what and when.

Practice: Use consistent naming (e.g., created_at, updated_by_user_id) and enforce non-null user IDs where possible.



Optimize Performance
Practice: Add indexes on timestamp and user context columns if queried frequently.

Example:

CREATE INDEX idx_created_at ON transactions (created_at);
CREATE INDEX idx_updated_by ON transactions (updated_by_user_id);


Best practice for implementing the triggers:
Why: Executes before the row is updated, allowing modification of the NEW row (e.g., setting updated_at). Ideal for simple metadata updates.

Practice: Use BEFORE UPDATE to set updated_at and optionally updated_by_user_id based on a session variable.

Example:

CREATE OR REPLACE FUNCTION update_timestamp_and_user()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    NEW.updated_by_user_id = COALESCE(
        current_setting('myapp.current_user_id', TRUE)::INT,
        NEW.created_by_user_id  -- Fallback to creator
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_updated_metadata
BEFORE UPDATE ON transactions
FOR EACH ROW
EXECUTE FUNCTION update_timestamp_and_user();



How It Works:
NEW.updated_at sets the current UTC timestamp.

NEW.updated_by_user_id retrieves the user ID from a session variable set by the app (e.g., SET SESSION myapp.current_user_id = '1').

COALESCE ensures a fallback value if the variable isn’t set.

Best Practice:
Use BEFORE UPDATE for direct column updates to maintain atomicity within the transaction.

Set the session variable in the application at connection initialization or per reques



Use AFTER UPDATE Triggers for Audit Logging


Why: Executes after the row is updated, allowing access to both OLD and NEW values. Ideal for logging changes to a separate audit table.

Practice: Use AFTER UPDATE to record changes in an audit table for compliance or debugging.

Example:

CREATE TABLE transaction_audit (
    audit_id SERIAL PRIMARY KEY,
    transaction_id INT REFERENCES transactions(id),
    old_data JSONB,
    new_data JSONB,
    changed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    changed_by_user_id INT REFERENCES users(id)
);

CREATE OR REPLACE FUNCTION log_transaction_changes()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO transaction_audit (transaction_id, old_data, new_data, changed_by_user_id)
    VALUES (
        NEW.id,
        jsonb_build_object('data', OLD.data, 'updated_at', OLD.updated_at),
        jsonb_build_object('data', NEW.data, 'updated_at', NEW.updated_at),
        COALESCE(current_setting('myapp.current_user_id', TRUE)::INT, NEW.created_by_user_id)
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER log_transaction_audit
AFTER UPDATE ON transactions
FOR EACH ROW
EXECUTE FUNCTION log_transaction_changes();


How It Works:
Logs the old and new values as JSONB for flexibility.

Uses the same session variable for consistency with BEFORE UPDATE.

Best Practice:
Use AFTER UPDATE for side effects (e.g., logging) rather than modifying the row itself.

Keep audit tables lightweight to avoid performance overhead in OLTP systems.

3. Trigger Design Tips
Minimize Logic: Keep trigger functions simple to reduce execution time in high-throughput systems.

Handle Concurrency: Use FOR EACH ROW for row-level updates; avoid table-level locks unless necessary.

Test Thoroughly: Simulate concurrent updates to ensure triggers don’t cause deadlocks or performance bottlenecks.



Application Integration Best Practices
Hybrid Approach (Recommended for OLTP)
Why: Balances database consistency with application flexibility, ideal for systems with external authentication.

Practice:
Application sets created_at (optional, if not using DEFAULT) and created_by_user_id during INSERT.

Database trigger sets updated_at and updated_by_user_id via a session variable.


Conclusion
For PostgreSQL in OLTP applications:
Use TIMESTAMP WITH TIME ZONE for timestamps and foreign keys for user context.

Leverage BEFORE UPDATE triggers for updated_at and optionally updated_by_user_id to ensure consistency, especially in high-concurrency scenarios.

Use AFTER UPDATE triggers for audit logging to meet compliance needs.

Prefer a hybrid approach with session variables for user context in production OLTP systems, or full application logic for flexibility and portability in smaller or portable apps.

Always test triggers and application logic under load to ensure performance and reliability.

This approach provides a robust, auditable, and scalable design for application developers working with PostgreSQL.
